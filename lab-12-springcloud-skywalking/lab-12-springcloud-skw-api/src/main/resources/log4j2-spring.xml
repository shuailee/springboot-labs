<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--status="WARN" :用于设置log4j2自身内部日志的信息输出级别，默认是OFF-->
<!--monitorInterval="30"  :间隔秒数,自动检测配置文件的变更和重新配置本身-->
<Configuration status="WARN" monitorInterval="60" strict="true">
    <!--1  定义一些配置变量可以再下面配置中使用-->
    <properties>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <property name="charset">UTF-8</property>
        <property name="LOG_PATH">/home</property>
        <property name="project_name">demo-api</property>
        <!--自定义的输出格式
        traceId:[%traceId] 为skywalking的traceid，只需要引入pom依赖：apm-toolkit-log4j-2.x
        需要配置：<Console name="Console" target="SYSTEM_OUT" class="org.apache.skywalking.apm.toolkit.log.log4j.v2.x.Log4j2OutputAppender">
        -->
        <property name="pattern">[%level] [%date{yyyy-MM-dd HH:mm:ss,SSS}] [%class:%line\] [%thread] [%X{requestId}]  traceId:[%traceId]
            [%X{serverIp}] %m%n
        </property>
    </properties>

    <!--2 appenders:定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingFile]-->
    <!--Appender可以理解为日志的输出目的地-->
    <Appenders>
        <!--console :控制台输出的配置-->
        <Console name="Console" target="SYSTEM_OUT" class="org.apache.skywalking.apm.toolkit.log.log4j.v2.x.Log4j2OutputAppender">
            <PatternLayout  pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - [%traceId] 日志 - %msg%n"/>
        </Console>


        <!--输出到指定区域：RollingRandomAccessFile性能比RollingFile提升官网宣称是20-200%
        info 日志规则
        -->
        <RollingRandomAccessFile name="RollingInfoFile" fileName="${LOG_PATH}/logs/${project_name}/info.log"
                                 filePattern="${LOG_PATH}/logs/${project_name}/info_%d{yyyy-MM-dd}.log">
            <!--引用上面自定义的输出格式-->
            <PatternLayout pattern="${pattern}" charset="${charset}"/>
            <!-- Policies :日志滚动策略-->
            <Policies>
                <!-- <CronTriggeringPolicy schedule="0 0 2 * * ?" evaluateOnStartup="true"/>-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!--ThresholdFilter :日志输出过滤-->
            <Filters>
                <!--level="info" :日志级别,onMatch="ACCEPT" :级别在info之上则接受,onMismatch="DENY" :级别在info之下则拒绝-->
                <!--与logger、root中定义的日志级别相配合，相当于两个闸门，先判断logger、root的级别，符合了才会用到该filter中的level，此时再进行一次筛选-->
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
                <!--<ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>-->
            </Filters>

            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件-->
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_PATH}" maxDepth="2" followLinks="true">
                    <IfFileName glob="system.log.*.gz"/>
                    <!--只保留7天，超过则删除-->
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>

        </RollingRandomAccessFile>

        <!--
       error 日志规则，RollingRandomAccessFile也可以设置 bufferSize="4096"属性
       -->
        <RollingRandomAccessFile name="RollingErrorFile" fileName="${LOG_PATH}/logs/${project_name}/error.log"
                                 filePattern="${LOG_PATH}/logs/${project_name}/error_%d{yyyy-MM-dd}.log">
            <PatternLayout pattern="${pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingRandomAccessFile>

        <!-- 自定义SkywalkingAppender 的处理类，日志集成Skywalking-->
        <SkywalkingAppender name="SkywalkingAppender"/>
    </Appenders>

    <!--3 然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出，只能又一个Root -->
        <Root level="error">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingErrorFile"/>
            <appender-ref ref="RollingInfoFile"/>
        </Root>
        <!-- 定义logger,未指定时ref走root设置的ref-->
        <Logger name="org.springframework" level="error"/>
        <Logger name="com.google" level="error"/>
        <!--        <Logger name="org.hibernate" level="error" />-->
        <!--        <Logger name="com.alibaba.dubbo" level="error" />-->
        <Logger name="org.mybatis" level="error"/>
        <Logger name="org.apache" level="error"/>
        <Logger name="io.undertow" level="error"/>
        <Logger name="springfox.documentation" level="error"/>
        <!-- 定义logger,自定义ref的处理类集成cat-->
        <Logger name="com.shuailee" level="info">
            <AppenderRef ref="SkywalkingAppender"/>
        </Logger>
    </Loggers>
</Configuration>